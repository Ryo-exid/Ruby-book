# Rubyにおける正規表現オブジェクト

regex = /\d{3}-\d{4}/
p regex.class #=> Regexp


# if文で =~ を使うとマッチしたかどうかを判別できる
if '123-4567' =~ /\d{3}-\d{4}/
  puts 'マッチしました'
else
  puts 'マッチしませんでした'
end
#=> マッチしました



text = '私の誕生日は1996年7月7日です。'
m = /(\d+)年(\d+)月(\d+)日/.match(text)
p m[1] #=> "1996"
p m[2] #=> "7"
p m[3] #=> "7"


p /(\d+)年(\d+)月(\d+)日/.match(text) #=> #<MatchData "1996年7月7日" 1:"1996" 2:"7" 3:"7">



text = '私の誕生日は1996年7月7日です。'

if m = /(\d+)年(\d+)月(\d+)日/.match(text)
  # マッチした場合の処理
else
  # マッチしなかった場合の処理
end


puts '①---------------------------'


# キャプチャの結果に名前をつける

text = '私の誕生日は1996年7月7日です。'

m = /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/.match(text)

p m[:year] #=> "1996"
p m[:month] #=> "7"
p m[:day] #=> "7"

# 文字列で指定もできる
p m['year']


# =~演算子を使うと、キャプチャの名前がそのままローカル変数に割り当てられる ※左辺と右辺が逆だと使うことができない。
text = '私の誕生日は1996年7月7日です。'

if /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/ =~ text
  puts "#{year}/#{month}/#{day}"
end
#=> 1996/7/7


=begin


正規表現オブジェクトを一旦変数に入れたりした場合も使うことができない

---------------------------------------------------------
text = '私の誕生日は1996年7月7日です。'
regrexp = /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/

if regrexp =~ text
  puts "#{year}/#{month}/#{day}"
end

#=> NameError
---------------------------------------------------------


=end


puts '②---------------------------'


# scanメソッド（引数で渡した正規表現にマッチする部分を配列に入れて返す）
p '123 456 789'.scan(/\d+/) #=> ["123", "456", "789"]

p '1996年12月31日 2021年7月28日'.scan(/(\d+)年(\d+)月(\d+)日/) #=> [["1996", "12", "31"], ["2021", "7", "28"]]

# グループ化はしたいがキャプチャはしたくないという場合は (?:) というメタ文字を使用
p '1996年12月31日 2021年7月28日'.scan(/(?:\d+)年(?:\d+)月(?:\d+)日/) #=> ["1996年12月31日", "2021年7月28日"]
